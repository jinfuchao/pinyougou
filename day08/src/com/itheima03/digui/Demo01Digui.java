package com.itheima03.digui;

/*
    递归
        在java中 就是方法 自己 内部 调用了 自己的现象

        public void method(){
            method()
        }
        直接递归
            a(){
                a();
            }

        间接递归
            a(){
                b();
            }
            b(){
                c();
            }
            c(){
                a();
            }

        Math.MAX(1,Math.Max(0,2)) 不是递归

        递归的注意事项
            1:要有边界条件,跳出递归的条件(递归必须要有出口)
            2:如果递归过深的话,会造成内存溢出(递归不宜过深)
            3.递归必须有规律


            生活 例子
              1: 从前有座山, 山里有个庙,庙里有个老和尚在跟小和尚讲故事;
                从前有座山, 山里有个庙,庙里有个老和尚在跟小和尚讲故事;
                    从前有座山, 山里有个庙,庙里有个老和尚在跟小和尚讲故事;
                        从前有座山, 山里有个庙,庙里有个老和尚在跟小和尚讲故事;
                        .....

              2: 放羊---挣学费---上传智博客---学编程---高薪就业---娶妻---生娃娃
                    放羊---挣学费---上传智博客---学编程---高薪就业---娶妻---生娃娃
                        放羊---挣学费---上传智博客---学编程---高薪就业---娶妻---生娃娃
                        ...
                        比如  娶不到媳妇或者 生不了娃

 */
public class Demo01Digui {

    public static void main(String[] args) {
        //计算 1~n之和 使用 递归完成
        int n = 5;// 1 + 2 + 3 + 4 + 5

        int sum = getSum(n);
        System.out.println("结果为" + sum);

//        int s = 0;
//        for (int i = 1; i <= n; i++) {
//            s += i;
//        }

    }

    /**
     * 递归 算法完成
     * @param n 我们递归的累加最后的值
     * @return 返回的是1~n的累加之和
     */
    public static int getSum(int n){
        /*
            当n为1的时候 方法返回1
            相当于递归的出口
         */
        if(n == 1){
            return 1;
        }

        /*
            n不为1的时候 方法 返回n+(1~n-1累加之和)
            递归调用 getSum()方法
         */
        return n + getSum(n - 1);// 5 + (1 ~ 4之间的和)
    }

}
